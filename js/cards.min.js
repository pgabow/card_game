const e = document.querySelector('#start'),
  t = document.querySelector('#over'),
  a = document.querySelectorAll('.screen'),
  o = document.querySelector('.modal'),
  r = document.querySelector('.overlay-modal'),
  l = document.querySelector('.modal__description'),
  c = document.querySelector('.modal__description-time'),
  s = document.querySelector('#board'),
  i = document.querySelector('.over__description'),
  n = document.querySelector('.over__description-level'),
  d = document.querySelector('.over__description-time'),
  u = document.querySelector('#level-list'),
  p = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8],
  m = [],
  g = []
let f = 0,
  _ = 0,
  h = 0
const b = p.length / 2
let y,
  v,
  L,
  q,
  w,
  S = null,
  M = null,
  k = !1
const T = new Audio()
T.loop = !0
const A = new Audio(),
  E = new Audio(),
  H = new Audio()
;(T.src = 'http://gabow.ru/card_game/sound/music.mp3'),
  (A.src = 'http://gabow.ru/card_game/sound/sound.mp3'),
  (E.src = 'http://gabow.ru/card_game/sound/sound2.mp3'),
  (H.src = 'http://gabow.ru/card_game/sound/sound3.mp3'),
  (e.onclick = (e) => {
    e.preventDefault(), A.play(), a[0].classList.add('up')
  }),
  (t.onclick = (e) => {
    e.preventDefault(),
      clearInterval(M),
      m.splice(0, 16),
      g.splice(0, 2),
      (s.innerHTML = ''),
      (f = 0),
      (_ = 0),
      (h = 0),
      (k = !1),
      a[0].classList.remove('up'),
      a[1].classList.remove('up'),
      a[2].classList.remove('up'),
      A.play()
  }),
  (u.onclick = (e) => {
    e.preventDefault(),
      e.target.classList.contains('level-btn') &&
        ((q = parseInt(e.target.getAttribute('data-level'))),
        a[1].classList.add('up'),
        console.log('level ', q),
        A.play(),
        j())
  })
const $ = (e = 1) => {
    for (let t = 0; t < p.length; t++) {
      let a = { suit: !1, flip: !1, number: p[t], order: Math.floor(16e3 * Math.random() * e) + 1 }
      m.push(a)
    }
    m.sort((e, t) => (e.order < t.order ? -1 : 1))
  },
  D = (e, t) => Math.floor(Math.random() * (t - e + 1)) + e,
  I = (e = 2) => {
    const t = document.querySelectorAll('.card > .card__face.card__face--back')
    t.forEach(
      (t) => (t.style.backgroundImage = `url('http://gabow.ru/card_game/img/bg${D(1, e)}.jpg')`)
    ),
      k
        ? ((t[D(1, 15)].style.backgroundImage = "url('http://gabow.ru/card_game/img/bg9.jpg')"),
          (t[D(1, 15)].style.backgroundImage = "url('http://gabow.ru/card_game/img/bg10.jpg')"))
        : (t[D(1, 15)].style.backgroundImage = "url('http://gabow.ru/card_game/img/bg10.jpg')")
  },
  j = () => {
    switch (
      ($(q),
      (() => {
        for (let e = 0; e < m.length; e++) {
          const t = document.createElement('div')
          t.classList.add('card'),
            (t.dataset.card = m[e].number),
            (t.innerHTML = `<div class="card__face card__face--front" data-card="${m[e].number}"><p>${m[e].number}</p></div>\n\t\t<div class="card__face card__face--back" data-card="${m[e].number}"></div>`),
            t.classList.add('is-flipped'),
            s.append(t)
        }
      })(),
      q)
    ) {
      case 1:
        ;(y = 600), (w = 'простой')
        break
      case 4:
        ;(y = 400), (w = 'средний'), I(q)
        break
      case 8:
        ;(y = 300),
          (w = 'сложный'),
          (k = !0),
          document.querySelectorAll('.card').forEach((e) => {
            2 === D(1, 2) && e.classList.add('rotate--front')
          }),
          I(q)
    }
    const e = document.querySelectorAll('.card')
    e.forEach((t, s) => {
      t.addEventListener('click', function (u) {
        u.preventDefault(),
          A.play(),
          m[s].flip || m[s].suit
            ? h < b &&
              !m[s].suit &&
              (t.classList.toggle('is-flipped'), (m[s].flip = !m[s].flip), g.splice(0, 1))
            : (f++,
              A.play(),
              1 === f && (v = Date.now()),
              50 === f &&
                (T.pause(),
                H.play(),
                o.classList.add('active'),
                r.classList.add('active'),
                (l.innerHTML = `Уже было ${f} попыток`),
                (c.innerHTML = 'Надо быть более внимательным')),
              k && (_++, console.log('Тучи сгущаются ', _), T.play()),
              _ > 14
                ? ((_ = 0),
                  (h = 0),
                  g.length > 0 && g.splice(0, g.length),
                  m.forEach((e) => {
                    ;(e.flip = !1), (e.suit = !1)
                  }),
                  clearTimeout(S),
                  e.forEach((e) => {
                    e.classList.add('is-flipped')
                  }))
                : (t.classList.toggle('is-flipped'),
                  (m[s].flip = !m[s].flip),
                  g.push({ item: u.target.dataset.card, position: s }),
                  g.length > 1 &&
                    (g[0].item === g[1].item
                      ? ((m[g[0].position].suit = !0),
                        (m[g[1].position].suit = !0),
                        g.splice(0, 2),
                        clearTimeout(S),
                        k && ((_ -= 2), console.log('Барсук выдыхай ', _)),
                        h++,
                        h == b &&
                          ((L = Date.now()),
                          T.pause(),
                          E.play(),
                          (i.innerHTML = `Всего  попыток: ${f}.`),
                          (n.innerHTML = `Уровень игры <span>${w}</span>.`),
                          (d.innerHTML = 'Время игры: ' + x(L - v)),
                          (M = setTimeout(() => {
                            a[2].classList.add('up')
                          }, 1e3))))
                      : (S = setTimeout(() => {
                          ;(m[g[0].position].flip = !1),
                            (m[g[1].position].flip = !1),
                            e[g[0].position].classList.toggle('is-flipped'),
                            e[g[1].position].classList.toggle('is-flipped'),
                            g.splice(0, 2)
                        }, y)))))
      })
    })
  },
  x = (e) => {
    let t = Math.floor((e % 1e3) / 100),
      a = Math.floor((e / 1e3) % 60),
      o = Math.floor((e / 6e4) % 60)
    return (
      (o = o < 10 ? '0' + o : o),
      (a = a < 10 ? '0' + a : a),
      (t = t < 10 ? '0' + t : t),
      o + 'м ' + a + 'с ' + t + 'мс'
    )
  }
